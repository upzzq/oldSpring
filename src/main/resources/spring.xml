<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"       
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd"
        >
        
        <context:component-scan base-package="com.supplies">
        	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        </context:component-scan>
        
        
        <bean id="proprtyConfigurer" class="com.supplies.config.SuppliesManagerConfigurer">
        	<property name="locations">
        		<list>
        			<value>classpath:redis.properties</value>
        			<value>classpath:jdbc.properties</value>
        		<!-- 	<value>classpath:sqlserver.properties</value> -->
        		</list>
        	</property>
        </bean>
        
       
        <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
	        <property name="url" value="${jdbc.url}"/>
	        <property name="username" value="${jdbc.username}"/>
	        <property name="password" value="${jdbc.password}"/>
	        <!-- 根据连接字符串会自动选择数据库类型 可以不配置-->
	    <!--     <property name="driverClassName" value="${jdbc.driverClassName}" /> -->
	
	        <!-- 配置初始化大小、最小、最大 -->
	        <property name="initialSize" value="${jdbc.initialSize}"/>
	        <property name="minIdle" value="${jdbc.minIdle}"/>
	        <property name="maxActive" value="${jdbc.maxActive}"/>
	
	        <!-- 配置获取连接等待超时的时间 -->
	        <property name="maxWait" value="${jdbc.maxWait}"/>
	        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
	        <property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
	
	        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	        <property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
	
	        <property name="validationQuery" value="${jdbc.validationQuery}" />
	        <property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
	        <property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
	        <property name="testOnReturn" value="${jdbc.testOnReturn}" />
	
	        <!-- 打开PSCache，并且指定每个连接上PSCache的大小  如果用Oracle，则把poolPreparedStatements配置为true，mysql可以配置为false。-->
	        <property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
	        <property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
	
	        <!-- 配置监控统计拦截的filters -->
	        <property name="filters" value="${jdbc.filters}" />
        </bean>
        
        <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        	<property name="dataSource" ref="dataSource"/>
        	<property name="configLocation" value="classpath:mybatis-config.xml"/>
        	<property name="mapperLocations"  >
			<list>
				<value>classpath:com/supplies/mapper/*.xml</value>
			</list>
		</property>
        </bean>
        
         <!-- 配置通用Mapper -->
	    <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		    <property name="basePackage" value="com.supplies.dao"/>
		    <property name="properties">
		        <value>
		            mappers=tk.mybatis.mapper.common.Mapper
		        </value>
		    </property>
	    </bean>
        
        	<!-- 声明式事物管理 -->
        <bean id="tran" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        	<property name="dataSource" ref="dataSource"/>
        </bean>
        
	    <tx:advice id="txAdvice" transaction-manager="tran">       
	        <tx:attributes>          
	            <tx:method name="get*" read-only="true"/>
	            <tx:method name="find*" read-only="true"/> 
	            <tx:method name="select*" read-only="true"/>            
	           <!--  <tx:method name="save*" propagation="REQUIRED" timeout="-1" rollback-for="java.lang.RuntimeException"/> -->
	            <tx:method name="*"/>
	        </tx:attributes>
	    </tx:advice>
	    
	    <aop:config>
			<aop:pointcut id="pcut" expression="execution(* com.supplies.service..*.*(..))" />
			<aop:advisor advice-ref="txAdvice" pointcut-ref="pcut"/>
		</aop:config>
		
		<!-- Redis自动缓存拦截器 -->   
		<bean id="methodCacheInterceptor" class="com.supplies.interceptor.MethodCacheInterceptor" >  
	         <property name="autoCache" value="${autoCache}"/>
	    </bean >  
		
		<!-- Redis自动缓存 -->   
		<bean id="methodCachePointCut"  class="org.springframework.aop.support.RegexpMethodPointcutAdvisor" >  
	      <property name="advice" ref="methodCacheInterceptor" />  
	      <property name="patterns" >  
	          <list>  
	          <!--  确定正则表达式列表   -->
	             <value>com\.supplies\.service\.impl\...*ServiceImpl.*</value >  
	          </list>  
	      </property>  
		</bean>	
    
        
</beans>